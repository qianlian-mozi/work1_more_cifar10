{"env_info": "sys.platform: linux\nPython: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: /data/apps/cuda/11.3\nNVCC: Cuda compilation tools, release 11.3, V11.3.58\nGCC: gcc (GCC) 7.3.0\nPyTorch: 1.13.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.6\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.14.1\nOpenCV: 4.7.0\nMMCV: 1.7.1\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.6\nMMClassification: 0.25.0+3d4f80d", "seed": 1062116773, "mmcls_version": "0.25.0", "config": "model = dict(\n    type='ImageClassifier',\n    backbone=dict(\n        type='SVT',\n        arch='base',\n        in_channels=3,\n        out_indices=(3, ),\n        qkv_bias=True,\n        norm_cfg=dict(type='LN'),\n        norm_after_stage=[False, False, False, True],\n        drop_rate=0.0,\n        attn_drop_rate=0.0,\n        drop_path_rate=0.3),\n    neck=dict(type='GlobalAveragePooling'),\n    head=dict(\n        type='LinearClsHead',\n        num_classes=10,\n        in_channels=768,\n        loss=dict(\n            type='LabelSmoothLoss', label_smooth_val=0.1, mode='original'),\n        cal_acc=False,\n        topk=(1, )),\n    init_cfg=[\n        dict(type='TruncNormal', layer='Linear', std=0.02, bias=0.0),\n        dict(type='Constant', layer='LayerNorm', val=1.0, bias=0.0)\n    ],\n    train_cfg=dict(augments=[\n        dict(type='BatchMixup', alpha=0.8, num_classes=10, prob=0.5),\n        dict(type='BatchCutMix', alpha=1.0, num_classes=10, prob=0.5)\n    ]))\ndataset_type = 'CIFAR10'\nimg_norm_cfg = dict(\n    mean=[125.307, 122.961, 113.8575],\n    std=[51.5865, 50.847, 51.255],\n    to_rgb=False)\ntrain_pipeline = [\n    dict(type='RandomCrop', size=32, padding=4),\n    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),\n    dict(\n        type='Normalize',\n        mean=[125.307, 122.961, 113.8575],\n        std=[51.5865, 50.847, 51.255],\n        to_rgb=False),\n    dict(type='ImageToTensor', keys=['img']),\n    dict(type='ToTensor', keys=['gt_label']),\n    dict(type='Collect', keys=['img', 'gt_label'])\n]\ntest_pipeline = [\n    dict(\n        type='Normalize',\n        mean=[125.307, 122.961, 113.8575],\n        std=[51.5865, 50.847, 51.255],\n        to_rgb=False),\n    dict(type='ImageToTensor', keys=['img']),\n    dict(type='Collect', keys=['img'])\n]\ndata = dict(\n    samples_per_gpu=128,\n    workers_per_gpu=4,\n    train=dict(\n        type='CIFAR10',\n        data_prefix='data/cifar10',\n        pipeline=[\n            dict(type='RandomCrop', size=32, padding=4),\n            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),\n            dict(\n                type='Normalize',\n                mean=[125.307, 122.961, 113.8575],\n                std=[51.5865, 50.847, 51.255],\n                to_rgb=False),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='ToTensor', keys=['gt_label']),\n            dict(type='Collect', keys=['img', 'gt_label'])\n        ]),\n    val=dict(\n        type='CIFAR10',\n        data_prefix='data/cifar10',\n        pipeline=[\n            dict(\n                type='Normalize',\n                mean=[125.307, 122.961, 113.8575],\n                std=[51.5865, 50.847, 51.255],\n                to_rgb=False),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ],\n        test_mode=True),\n    test=dict(\n        type='CIFAR10',\n        data_prefix='data/cifar10',\n        pipeline=[\n            dict(\n                type='Normalize',\n                mean=[125.307, 122.961, 113.8575],\n                std=[51.5865, 50.847, 51.255],\n                to_rgb=False),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ],\n        test_mode=True))\noptimizer = dict(\n    type='AdamW',\n    lr=0.000125,\n    weight_decay=0.05,\n    eps=1e-08,\n    betas=(0.9, 0.999),\n    paramwise_cfg=dict(_delete=True, norm_decay_mult=0.0, bias_decay_mult=0.0))\noptimizer_config = dict(grad_clip=dict(max_norm=5.0))\nrunner = dict(type='EpochBasedRunner', max_epochs=20)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(\n    interval=100,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'pretrained/twins-svt-base_3rdparty_8xb128_in1k_20220126-e31cc8e9.pth'\nresume_from = None\nworkflow = [('train', 1)]\nparamwise_cfg = dict(_delete=True, norm_decay_mult=0.0, bias_decay_mult=0.0)\nlr_config = dict(\n    policy='CosineAnnealing',\n    by_epoch=True,\n    min_lr_ratio=0.001,\n    warmup='linear',\n    warmup_ratio=0.0001,\n    warmup_iters=5,\n    warmup_by_epoch=True)\nevaluation = dict(interval=1, metric='accuracy')\nwork_dir = 'work/work1_more_twins_1xb64_cifar10'\ngpu_ids = [0]\ndevice = 'cuda'\nseed = 1062116773\n", "CLASSES": ["airplane", "automobile", "bird", "cat", "deer", "dog", "frog", "horse", "ship", "truck"]}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 1e-05, "memory": 1945, "data_time": 0.024, "loss": 2.31662, "grad_norm": 5.83865, "time": 0.17207}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 1e-05, "memory": 1945, "data_time": 0.00052, "loss": 2.26529, "grad_norm": 4.37225, "time": 0.10881}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 2e-05, "memory": 1945, "data_time": 0.00051, "loss": 2.0394, "grad_norm": 5.79068, "time": 0.1093}
{"mode": "val", "epoch": 1, "iter": 79, "lr": 2e-05, "accuracy_top-1": 64.27, "accuracy_top-5": 96.87}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 3e-05, "memory": 1945, "data_time": 0.02099, "loss": 1.71979, "grad_norm": 4.99451, "time": 0.13016}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 4e-05, "memory": 1945, "data_time": 0.00049, "loss": 1.68042, "grad_norm": 4.80838, "time": 0.10973}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 4e-05, "memory": 1945, "data_time": 0.00061, "loss": 1.62578, "grad_norm": 4.61962, "time": 0.10971}
{"mode": "val", "epoch": 2, "iter": 79, "lr": 5e-05, "accuracy_top-1": 79.79, "accuracy_top-5": 98.86}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 5e-05, "memory": 1945, "data_time": 0.02079, "loss": 1.58334, "grad_norm": 4.47764, "time": 0.13032}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 6e-05, "memory": 1945, "data_time": 0.00056, "loss": 1.56642, "grad_norm": 4.38126, "time": 0.11007}
{"mode": "train", "epoch": 3, "iter": 300, "lr": 7e-05, "memory": 1945, "data_time": 0.00057, "loss": 1.53293, "grad_norm": 4.33071, "time": 0.11011}
{"mode": "val", "epoch": 3, "iter": 79, "lr": 7e-05, "accuracy_top-1": 84.16, "accuracy_top-5": 99.35}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 8e-05, "memory": 1945, "data_time": 0.02088, "loss": 1.48872, "grad_norm": 4.10563, "time": 0.13048}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 8e-05, "memory": 1945, "data_time": 0.00049, "loss": 1.51167, "grad_norm": 3.90586, "time": 0.10985}
{"mode": "train", "epoch": 4, "iter": 300, "lr": 9e-05, "memory": 1945, "data_time": 0.00053, "loss": 1.53974, "grad_norm": 3.85996, "time": 0.1098}
{"mode": "val", "epoch": 4, "iter": 79, "lr": 9e-05, "accuracy_top-1": 85.29, "accuracy_top-5": 99.55}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.0001, "memory": 1945, "data_time": 0.02088, "loss": 1.45932, "grad_norm": 4.08868, "time": 0.13041}
{"mode": "train", "epoch": 5, "iter": 200, "lr": 0.0001, "memory": 1945, "data_time": 0.0005, "loss": 1.47958, "grad_norm": 3.77848, "time": 0.10986}
{"mode": "train", "epoch": 5, "iter": 300, "lr": 0.00011, "memory": 1945, "data_time": 0.00053, "loss": 1.42412, "grad_norm": 3.81252, "time": 0.10991}
{"mode": "val", "epoch": 5, "iter": 79, "lr": 0.00011, "accuracy_top-1": 87.36, "accuracy_top-5": 99.53}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.00011, "memory": 1945, "data_time": 0.02059, "loss": 1.46482, "grad_norm": 3.70476, "time": 0.13015}
{"mode": "train", "epoch": 6, "iter": 200, "lr": 0.00011, "memory": 1945, "data_time": 0.00043, "loss": 1.42915, "grad_norm": 3.62258, "time": 0.10949}
{"mode": "train", "epoch": 6, "iter": 300, "lr": 0.00011, "memory": 1945, "data_time": 0.00051, "loss": 1.39866, "grad_norm": 3.64212, "time": 0.11087}
{"mode": "val", "epoch": 6, "iter": 79, "lr": 0.00011, "accuracy_top-1": 88.25, "accuracy_top-5": 99.53}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.0001, "memory": 1945, "data_time": 0.02075, "loss": 1.42824, "grad_norm": 3.68708, "time": 0.12951}
{"mode": "train", "epoch": 7, "iter": 200, "lr": 0.0001, "memory": 1945, "data_time": 0.00043, "loss": 1.44092, "grad_norm": 3.50622, "time": 0.10803}
{"mode": "train", "epoch": 7, "iter": 300, "lr": 0.0001, "memory": 1945, "data_time": 0.00048, "loss": 1.3759, "grad_norm": 3.50985, "time": 0.10957}
{"mode": "val", "epoch": 7, "iter": 79, "lr": 0.0001, "accuracy_top-1": 89.23, "accuracy_top-5": 99.57999}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 9e-05, "memory": 1945, "data_time": 0.02066, "loss": 1.38886, "grad_norm": 3.31999, "time": 0.13043}
{"mode": "train", "epoch": 8, "iter": 200, "lr": 9e-05, "memory": 1945, "data_time": 0.00041, "loss": 1.41859, "grad_norm": 3.44218, "time": 0.11005}
{"mode": "train", "epoch": 8, "iter": 300, "lr": 9e-05, "memory": 1945, "data_time": 0.00042, "loss": 1.41374, "grad_norm": 3.56232, "time": 0.10966}
{"mode": "val", "epoch": 8, "iter": 79, "lr": 9e-05, "accuracy_top-1": 89.57999, "accuracy_top-5": 99.68999}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 8e-05, "memory": 1945, "data_time": 0.02096, "loss": 1.38123, "grad_norm": 3.50811, "time": 0.13059}
{"mode": "train", "epoch": 9, "iter": 200, "lr": 8e-05, "memory": 1945, "data_time": 0.00042, "loss": 1.39321, "grad_norm": 3.3201, "time": 0.10971}
{"mode": "train", "epoch": 9, "iter": 300, "lr": 8e-05, "memory": 1945, "data_time": 0.00042, "loss": 1.32873, "grad_norm": 3.46692, "time": 0.10963}
{"mode": "val", "epoch": 9, "iter": 79, "lr": 8e-05, "accuracy_top-1": 89.98, "accuracy_top-5": 99.66}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 7e-05, "memory": 1945, "data_time": 0.02065, "loss": 1.38197, "grad_norm": 3.37496, "time": 0.13027}
{"mode": "train", "epoch": 10, "iter": 200, "lr": 7e-05, "memory": 1945, "data_time": 0.00043, "loss": 1.32914, "grad_norm": 3.49062, "time": 0.11008}
{"mode": "train", "epoch": 10, "iter": 300, "lr": 7e-05, "memory": 1945, "data_time": 0.00043, "loss": 1.31596, "grad_norm": 3.5081, "time": 0.10991}
{"mode": "val", "epoch": 10, "iter": 79, "lr": 7e-05, "accuracy_top-1": 89.85, "accuracy_top-5": 99.65}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 6e-05, "memory": 1945, "data_time": 0.0209, "loss": 1.35718, "grad_norm": 3.47764, "time": 0.13063}
{"mode": "train", "epoch": 11, "iter": 200, "lr": 6e-05, "memory": 1945, "data_time": 0.00043, "loss": 1.29598, "grad_norm": 3.49269, "time": 0.11029}
{"mode": "train", "epoch": 11, "iter": 300, "lr": 6e-05, "memory": 1945, "data_time": 0.00044, "loss": 1.35803, "grad_norm": 3.38833, "time": 0.10886}
{"mode": "val", "epoch": 11, "iter": 79, "lr": 6e-05, "accuracy_top-1": 90.68, "accuracy_top-5": 99.71}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 5e-05, "memory": 1945, "data_time": 0.02085, "loss": 1.36411, "grad_norm": 3.4937, "time": 0.12929}
{"mode": "train", "epoch": 12, "iter": 200, "lr": 5e-05, "memory": 1945, "data_time": 0.00043, "loss": 1.29905, "grad_norm": 3.39685, "time": 0.10952}
{"mode": "train", "epoch": 12, "iter": 300, "lr": 5e-05, "memory": 1945, "data_time": 0.00044, "loss": 1.34498, "grad_norm": 3.49012, "time": 0.10923}
{"mode": "val", "epoch": 12, "iter": 79, "lr": 5e-05, "accuracy_top-1": 91.18999, "accuracy_top-5": 99.75999}
{"mode": "train", "epoch": 13, "iter": 100, "lr": 4e-05, "memory": 1945, "data_time": 0.02076, "loss": 1.3486, "grad_norm": 3.39942, "time": 0.13036}
{"mode": "train", "epoch": 13, "iter": 200, "lr": 4e-05, "memory": 1945, "data_time": 0.00042, "loss": 1.31261, "grad_norm": 3.4477, "time": 0.10968}
{"mode": "train", "epoch": 13, "iter": 300, "lr": 4e-05, "memory": 1945, "data_time": 0.00043, "loss": 1.33077, "grad_norm": 3.38158, "time": 0.10972}
{"mode": "val", "epoch": 13, "iter": 79, "lr": 4e-05, "accuracy_top-1": 91.05, "accuracy_top-5": 99.75}
{"mode": "train", "epoch": 14, "iter": 100, "lr": 3e-05, "memory": 1945, "data_time": 0.02085, "loss": 1.26712, "grad_norm": 3.43292, "time": 0.1288}
{"mode": "train", "epoch": 14, "iter": 200, "lr": 3e-05, "memory": 1945, "data_time": 0.00042, "loss": 1.29772, "grad_norm": 3.36274, "time": 0.10854}
{"mode": "train", "epoch": 14, "iter": 300, "lr": 3e-05, "memory": 1945, "data_time": 0.00044, "loss": 1.31642, "grad_norm": 3.48523, "time": 0.10841}
{"mode": "val", "epoch": 14, "iter": 79, "lr": 3e-05, "accuracy_top-1": 91.81, "accuracy_top-5": 99.78}
{"mode": "train", "epoch": 15, "iter": 100, "lr": 3e-05, "memory": 1945, "data_time": 0.02079, "loss": 1.2976, "grad_norm": 3.42186, "time": 0.12869}
{"mode": "train", "epoch": 15, "iter": 200, "lr": 3e-05, "memory": 1945, "data_time": 0.00044, "loss": 1.28755, "grad_norm": 3.38087, "time": 0.10852}
{"mode": "train", "epoch": 15, "iter": 300, "lr": 3e-05, "memory": 1945, "data_time": 0.00043, "loss": 1.35277, "grad_norm": 3.35526, "time": 0.10849}
{"mode": "val", "epoch": 15, "iter": 79, "lr": 3e-05, "accuracy_top-1": 91.9, "accuracy_top-5": 99.72}
{"mode": "train", "epoch": 16, "iter": 100, "lr": 2e-05, "memory": 1945, "data_time": 0.0208, "loss": 1.26682, "grad_norm": 3.39091, "time": 0.12891}
{"mode": "train", "epoch": 16, "iter": 200, "lr": 2e-05, "memory": 1945, "data_time": 0.00042, "loss": 1.29134, "grad_norm": 3.42029, "time": 0.1082}
{"mode": "train", "epoch": 16, "iter": 300, "lr": 2e-05, "memory": 1945, "data_time": 0.00046, "loss": 1.29804, "grad_norm": 3.54469, "time": 0.10841}
{"mode": "val", "epoch": 16, "iter": 79, "lr": 2e-05, "accuracy_top-1": 91.77, "accuracy_top-5": 99.73}
{"mode": "train", "epoch": 17, "iter": 100, "lr": 1e-05, "memory": 1945, "data_time": 0.02081, "loss": 1.32015, "grad_norm": 3.44353, "time": 0.12839}
{"mode": "train", "epoch": 17, "iter": 200, "lr": 1e-05, "memory": 1945, "data_time": 0.00043, "loss": 1.2608, "grad_norm": 3.45162, "time": 0.10837}
{"mode": "train", "epoch": 17, "iter": 300, "lr": 1e-05, "memory": 1945, "data_time": 0.00044, "loss": 1.22781, "grad_norm": 3.35033, "time": 0.10843}
{"mode": "val", "epoch": 17, "iter": 79, "lr": 1e-05, "accuracy_top-1": 92.1, "accuracy_top-5": 99.77}
{"mode": "train", "epoch": 18, "iter": 100, "lr": 1e-05, "memory": 1945, "data_time": 0.02061, "loss": 1.21455, "grad_norm": 3.32956, "time": 0.12876}
{"mode": "train", "epoch": 18, "iter": 200, "lr": 1e-05, "memory": 1945, "data_time": 0.00063, "loss": 1.27028, "grad_norm": 3.42006, "time": 0.10839}
{"mode": "train", "epoch": 18, "iter": 300, "lr": 1e-05, "memory": 1945, "data_time": 0.00055, "loss": 1.27751, "grad_norm": 3.47709, "time": 0.10854}
{"mode": "val", "epoch": 18, "iter": 79, "lr": 1e-05, "accuracy_top-1": 92.21, "accuracy_top-5": 99.74}
{"mode": "train", "epoch": 19, "iter": 100, "lr": 0.0, "memory": 1945, "data_time": 0.02066, "loss": 1.32538, "grad_norm": 3.29441, "time": 0.12984}
{"mode": "train", "epoch": 19, "iter": 200, "lr": 0.0, "memory": 1945, "data_time": 0.00046, "loss": 1.24341, "grad_norm": 3.33535, "time": 0.10945}
{"mode": "train", "epoch": 19, "iter": 300, "lr": 0.0, "memory": 1945, "data_time": 0.00043, "loss": 1.29636, "grad_norm": 3.43556, "time": 0.10974}
{"mode": "val", "epoch": 19, "iter": 79, "lr": 0.0, "accuracy_top-1": 92.17, "accuracy_top-5": 99.74}
{"mode": "train", "epoch": 20, "iter": 100, "lr": 0.0, "memory": 1945, "data_time": 0.02076, "loss": 1.29729, "grad_norm": 3.3681, "time": 0.12908}
{"mode": "train", "epoch": 20, "iter": 200, "lr": 0.0, "memory": 1945, "data_time": 0.00043, "loss": 1.28288, "grad_norm": 3.41864, "time": 0.1085}
{"mode": "train", "epoch": 20, "iter": 300, "lr": 0.0, "memory": 1945, "data_time": 0.00045, "loss": 1.27049, "grad_norm": 3.4261, "time": 0.11015}
{"mode": "val", "epoch": 20, "iter": 79, "lr": 0.0, "accuracy_top-1": 92.11, "accuracy_top-5": 99.75}
